class SudokuAI:
    def __init__(self, board):
        self.board = board
        self.domains = self.init_domains()

    def init_domains(self):
        # Set domains for each cell
        domains = {}
        for i in range(9):
            for j in range(9):
                if self.board[i][j] == 0:
                    domains[(i, j)] = set(range(1, 10))
                else:
                    domains[(i, j)] = {self.board[i][j]}
        return domains

    def is_valid(self, cell, value):
        # Check row, column, and box constraints
        i, j = cell
        # Row
        for col in range(9):
            if self.board[i][col] == value:
                return False
        # Column
        for row in range(9):
            if self.board[row][j] == value:
                return False
        # Box
        box_row = 3 * (i // 3)
        box_col = 3 * (j // 3)
        for row in range(box_row, box_row + 3):
            for col in range(box_col, box_col + 3):
                if self.board[row][col] == value:
                    return False
        return True

    def solve(self):
        # Backtracking with forward checking
        for i in range(9):
            for j in range(9):
                if self.board[i][j] == 0:
                    for value in range(1, 10):
                        if self.is_valid((i, j), value):
                            self.board[i][j] = value
                            if self.solve():
                                return True
                            self.board[i][j] = 0
                    return False
        return True

    def print_board(self):
        for row in self.board:
            print(row)


# Example usage
puzzle = [
  [5, 3, 0, 0, 7, 0, 0, 0, 0],
  [6, 0, 0, 1, 9, 5, 0, 0, 0],
  [0, 9, 8, 0, 0, 0, 0, 6, 0],
  [8, 0, 0, 0, 6, 0, 0, 0, 3],
  [4, 0, 0, 8, 0, 3, 0, 0, 1],
  [7, 0, 0, 0, 2, 0, 0, 0, 6],
  [0, 6, 0, 0, 0, 0, 2, 8, 0],
  [0, 0, 0, 4, 1, 9, 0, 0, 5],
  [0, 0, 0, 0, 8, 0, 0, 7, 9]
]

solver = SudokuAI(puzzle)
solver.solve()
solver.print_board()
